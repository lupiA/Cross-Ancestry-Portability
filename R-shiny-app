library(shiny)
library(data.table)
library(ggplot2)


# Define the UI
ui <- fluidPage(
  titlePanel("SNP Portability App"),
  sidebarLayout(
    sidebarPanel(
      selectInput("dataset", "Select Genotype Array:",
                  choices = c("Calls SNPs", "Imputed SNPs")),
      h6("*imputed selection will take longer to load and run."),br(),
      uiOutput("population_dropdown"),br(),
      radioButtons("input_range", "Marker Input:",
                   choices = c("Single marker", "Range of markers (within chromosome)")),br(),
      radioButtons("input_type", "Input Type:",
                   choices = c("SNP RS ID", "Base Pair Position")),br(),
      conditionalPanel(
        condition = "input.input_type == 'SNP RS ID' && input.input_range == 'Single marker'",
        textInput("rs_id", "Enter SNP ID (e.g., rs4422948):")
      ),
      conditionalPanel(
        condition = "input.input_type == 'Base Pair Position' && input.input_range == 'Single marker'",
        textInput("bp_position", "Enter Base Pair Position:")
      ),
      conditionalPanel(
        condition = "input.input_type == 'SNP RS ID' && input.input_range == 'Range of markers (within chromosome)'",
        textInput("start_snp_id", "Enter Start SNP ID:"),
        textInput("end_snp_id", "Enter End SNP ID:")
      ),
      conditionalPanel(
        condition = "input.input_type == 'Base Pair Position' && input.input_range == 'Range of markers (within chromosome)'",
        textInput("start_bp_position", "Enter Start Base Pair Position:"),
        textInput("end_bp_position", "Enter End Base Pair Position:")
      )
    ),
    mainPanel(
      fluidRow(width = 6,
            verbatimTextOutput("error_message")
      ),
      fluidRow(width = 6, 
            h3("Portability Information"),
            tableOutput("table1")
      ),
      fluidRow(width = 6, 
             h3("Additional Information"),
             downloadButton("download_table", "Download Table"),
             tableOutput("table2")
      ),
      fluidRow(
        width = 6, 
        plotOutput("histogram")
      ),
    )
  )
)

# Define the server
server <- function(input, output, session) {
  dat <- reactive({
    if (input$dataset == "Calls SNPs") {
      fread("MAP_calls.csv", data.table = FALSE)
    } else if (input$dataset == "Imputed SNPs") {
      fread("MAP_imputed.csv", data.table = FALSE)
    }
  })
  
  observe({
    population_choices <- unique(dat()$Cohort)
    output$population_dropdown <- renderUI({
      selectInput("population", "Select Population:", choices = population_choices)
    })
  })
  
  observe({
    input_type <- input$input_type
    if (input_type == "SNP RS ID") {
      label <- "Enter SNP Name:"
    } else if (input_type == "Base Pair Position") {
      label <- "Enter Base Pair Position:"
    }
    output$input_label <- renderText({ label })
  })
  filtered_snp_data <- reactive({
    snps <- dat()
    colnames(snps)[3]="Relative Accuracy (RA)"
    
    snp_data <- NULL
    
    if (input$input_range == "Single marker") {
    
      if (input$input_type == "SNP RS ID") {
        snp_data <- snps[snps$SNP == input$rs_id & snps$Cohort == input$population, c("SNP","Relative Accuracy (RA)", "Corr. EU=>AF", "Corr. EU=>EU", "Chromosome", "BP position", "Allele")]
      } else if (input$input_type == "Base Pair Position") {
        snp_data <- snps[snps$`BP position` == input$bp_position & snps$Cohort == input$population, c("SNP","Relative Accuracy (RA)", "Corr. EU=>AF", "Corr. EU=>EU", "Chromosome", "BP position", "Allele")]
      }
    }  else if (input$input_range == "Range of markers (within chromosome)") {
      snps = snps[snps$Cohort == input$population, ]
      
      if (input$input_type == "SNP RS ID") {
        start_snp_idx <- which(snps$SNP == input$start_snp_id)
        end_snp_idx <- which(snps$SNP == input$end_snp_id)
      } else if (input$input_type == "Base Pair Position") {
        start_snp_idx <- which(snps$`BP position` == input$start_bp_position)
        end_snp_idx <- which(snps$`BP position` == input$end_bp_position)
      }
      
      if (length(start_snp_idx) > 0 && length(end_snp_idx) > 0 &&
          snps$Chromosome[start_snp_idx] == snps$Chromosome[end_snp_idx]) {
        snp_data <- snps[start_snp_idx:end_snp_idx, c("SNP","Relative Accuracy (RA)", "Corr. EU=>AF", "Corr. EU=>EU", "Chromosome", "BP position", "Allele")]
      }
    }
    
    if (is.null(snp_data) || nrow(snp_data) == 0) {
      snp_data <- NULL
    }
    snp_data
  })
  
  filtered_hist_data <- reactive({
    hist <- dat()
    hist_data <- hist[hist$Cohort == input$population, c("RA","Cohort")]
    if (nrow(hist_data) == 0) {
      hist_data <- NULL
    }
    if(!is.null(hist_data) && length(which(is.na(hist_data$RA)))>0){
      hist_data <- hist_data[-which(is.na(hist_data$RA)),]
    }
    hist_data
  })
  
  output$table1 <- renderTable({
    if (!is.null(input$rs_id) && !is.null(input$population) && !is.null(filtered_snp_data())) {
      if (!is.null(filtered_snp_data())) {
        averages <- colMeans(filtered_snp_data()[, c("Relative Accuracy (RA)", "Corr. EU=>AF", "Corr. EU=>EU")], na.rm = TRUE)
        
        if(input$input_range=="Range of markers (within chromosome)"){
          data.frame("Metric" = names(averages), "Average" = averages)
        } else if (input$input_range=="Single marker"){
          data.frame("Metric" = names(averages), "Value" = averages)
        }
      }
    }
  })
  
  output$table2 <- renderTable({
    if (!is.null(input$rs_id) && !is.null(input$population) && !is.null(filtered_snp_data())) {
      if (!is.null(filtered_snp_data())) {
        filtered_snp_data()[, c("SNP","Chromosome", "BP position", 
                                "Allele","Relative Accuracy (RA)", "Corr. EU=>AF", "Corr. EU=>EU")]
      }
    }
  })
  
  output$histogram <- renderPlot({
    if (input$input_range=="Single marker" && !is.null(input$rs_id) && !is.null(input$population) && !is.null(filtered_hist_data())) {
      ra_values <- as.numeric(filtered_hist_data()$RA)
      snp_ra <- as.numeric(filtered_snp_data()$`Relative Accuracy (RA)`)
      
      snp_percentile <- ecdf(ra_values)(snp_ra) * 100
      
      hist(ra_values, main = "Relative Accuracy Histogram\n\ ", xlab = "RA Value", ylab = "Frequency", col = "lightblue1", breaks = 75)
      abline(v = snp_ra, col = "red3", lwd = 3)
      
      mtext(paste("SNP RA Percentile: ", round(snp_percentile, 2), "%\n\ ",sep=""), side = 3, col = "black")
    }
  })
  
  output$download_table <- downloadHandler(
    filename = function() {
      paste("table_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      if (!is.null(input$rs_id) && !is.null(input$population) && !is.null(filtered_snp_data())) {
        filtered_table <- filtered_snp_data()[, c("SNP", "Chromosome", "BP position", "Allele","Relative Accuracy (RA)", "Corr. EU=>AF", "Corr. EU=>EU")]
        write.csv(filtered_table, file, row.names = FALSE)
      }
    }
  )
  
  output$error_message <- renderText({
    if (is.null(filtered_snp_data())) {
      "Enter valid inputs. Ranges must be within-chromosome."
    } else {
      return(NULL)
    }
  })
}

# Run
shinyApp(ui = ui, server = server)
